#if !defined(__BN3MONKEY_LIBRARY_INTERFACE_GENERATOR_KOTLINWRAPPERCONVERTER__)
#define __BN3MONKEY_LIBRARY_INTERFACE_GENERATOR_KOTLINWRAPPERCONVERTER__

static constexpr char* kotlinWrapperConverter =
"inline jstring createWrapperString(JNIEnv* env, const std::string& value)\n"
"{\n"
"    return env->NewStringUTF(value.c_str());\n"
"}\n"
"inline jbooleanArray createWrapperBooleanArray(JNIEnv* env, const std::vector<bool>& value)\n"
"{\n"
"    auto ret = env->NewBooleanArray(value.size());\n"
"    if (!ret)\n"
"        return nullptr;\n"
"    auto* arr = env->GetBooleanArrayElements(ret, nullptr);\n"
"    if (!arr)\n"
"        return nullptr;\n"
"\n"
"    for (size_t i = 0; i < value.size(); i++)\n"
"        arr[i] = (jboolean)value[i];\n"
"\n"
"    env->ReleaseBooleanArrayElements(ret, arr, 0);\n"
"    return ret;\n"
"}\n"
"inline jbyteArray createWrapperInt8Array(JNIEnv* env, const std::vector<int8_t>& value)\n"
"{\n"
"    auto ret = env->NewByteArray(value.size());\n"
"    if (!ret)\n"
"        return nullptr;\n"
"    auto* arr = env->GetByteArrayElements(ret, nullptr);\n"
"    if (!arr)\n"
"        return nullptr;\n"
"\n"
"    for (size_t i = 0; i < value.size(); i++)\n"
"        arr[i] = (jbyte)value[i];\n"
"\n"
"    env->ReleaseByteArrayElements(ret, arr, 0);\n"
"    return ret;\n"
"}\n"
"inline jshortArray createWrapperInt16Array(JNIEnv* env, const std::vector<int16_t>& value)\n"
"{\n"
"    auto ret = env->NewShortArray(value.size());\n"
"    if (!ret)\n"
"        return nullptr;\n"
"    auto* arr = env->GetShortArrayElements(ret, nullptr);\n"
"    if (!arr)\n"
"        return nullptr;\n"
"\n"
"    for (size_t i = 0; i < value.size(); i++)\n"
"        arr[i] = (jshort)value[i];\n"
"\n"
"    env->ReleaseShortArrayElements(ret, arr, 0);\n"
"    return ret;\n"
"}\n"
"inline jintArray createWrapperInt32Array(JNIEnv* env, const std::vector<int32_t>& value) // intArray, enumArray\n"
"{\n"
"    auto ret = env->NewIntArray(value.size());\n"
"    if (!ret)\n"
"        return nullptr;\n"
"    auto* arr = env->GetIntArrayElements(ret, nullptr);\n"
"    if (!arr)\n"
"        return nullptr;\n"
"\n"
"    for (size_t i = 0; i < value.size(); i++)\n"
"        arr[i] = (jint)value[i];\n"
"\n"
"    env->ReleaseIntArrayElements(ret, arr, 0);\n"
"    return ret;\n"
"}\n"
"inline jlongArray createWrapperInt64Array(JNIEnv* env, const std::vector<int64_t>& value)\n"
"{\n"
"    auto ret = env->NewLongArray(value.size());\n"
"    if (!ret)\n"
"        return nullptr;\n"
"    auto* arr = env->GetLongArrayElements(ret, nullptr);\n"
"    if (!arr)\n"
"        return nullptr;\n"
"\n"
"    for (size_t i = 0; i < value.size(); i++)\n"
"        arr[i] = (jlong)value[i];\n"
"\n"
"    env->ReleaseLongArrayElements(ret, arr, 0);\n"
"    return ret;\n"
"}\n"
"inline jfloatArray createWrapperFloatArray(JNIEnv* env, const std::vector<float>& value)\n"
"{\n"
"    auto ret = env->NewFloatArray(value.size());\n"
"    if (!ret)\n"
"        return nullptr;\n"
"    auto* arr = env->GetFloatArrayElements(ret, nullptr);\n"
"    if (!arr)\n"
"        return nullptr;\n"
"\n"
"    for (size_t i = 0; i < value.size(); i++)\n"
"        arr[i] = (jfloat)value[i];\n"
"\n"
"    env->ReleaseFloatArrayElements(ret, arr, 0);\n"
"    return ret;\n"
"}\n"
"inline jdoubleArray createWrapperDoubleArray(JNIEnv* env, const std::vector<double>& value)\n"
"{\n"
"    auto ret = env->NewDoubleArray(value.size());\n"
"    if (!ret)\n"
"        return nullptr;\n"
"    auto* arr = env->GetDoubleArrayElements(ret, nullptr);\n"
"    if (!arr)\n"
"        return nullptr;\n"
"\n"
"    for (size_t i = 0; i < value.size(); i++)\n"
"        arr[i] = (jdouble)value[i];\n"
"\n"
"    env->ReleaseDoubleArrayElements(ret, arr, 0);\n"
"    return ret;\n"
"}\n"
"inline jobjectArray createWrapperStringArray(JNIEnv* env, const std::vector<std::string>& value) // stringArray\n"
"{\n"
"    auto jstringClazz = env->FindClass(\"java/lang/String\");\n"
"\n"
"    auto ret = env->NewObjectArray(value.size(), jstringClazz, nullptr);\n"
"    if (!ret)\n"
"        return nullptr;\n"
"\n"
"    for (size_t i = 0; i < value.size(); i++)\n"
"    {\n"
"        auto jstring = createWrapperString(env, value[0]);\n"
"        env->SetObjectArrayElement(ret, i, jstring);\n"
"    }\n"
"\n"
"    return ret;\n"
"}\n"
"inline jintArray createWrapperEnumArray(JNIEnv* env, const std::vector<int32_t>& value)\n"
"{\n"
"    auto ret = env->NewIntArray(value.size());\n"
"    if (!ret)\n"
"        return nullptr;\n"
"    auto* arr = env->GetIntArrayElements(ret, nullptr);\n"
"    if (!arr)\n"
"        return nullptr;\n"
"\n"
"    for (size_t i = 0; i < value.size(); i++)\n"
"        arr[i] = (jint)value[i];\n"
"\n"
"    env->ReleaseIntArrayElements(ret, arr, 0);\n"
"    return ret;\n"
"}\n"
"\n"
"inline jlongArray createWrapperObjectArray(JNIEnv* env, const std::vector<void*>& value) // objectArray\n"
"{\n"
"    auto ret = env->NewLongArray(value.size());\n"
"    if (!ret)\n"
"        return nullptr;\n"
"    auto* arr = env->GetLongArrayElements(ret, nullptr);\n"
"    if (!arr)\n"
"        return nullptr;\n"
"\n"
"    for (size_t i = 0; i < value.size(); i++)\n"
"        arr[i] = (jlong)value[i];\n"
"\n"
"    env->ReleaseLongArrayElements(ret, arr, 0);\n"
"    return ret;\n"
"}\n"
"inline jobject createWrapperBooleanVector(JNIEnv* env, const std::vector<bool>& value)\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodInit = env->GetMethodID(arrayListClass, \"<init>\", \"()V\");\n"
"    jmethodID methodAdd = env->GetMethodID(arrayListClass, \"add\", \"(Ljava/lang/Object;)Z\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Boolean\");\n"
"    jmethodID methodTypeInit = env->GetMethodID(typeClass, \"<init>\", \"(Z)V\");\n"
"\n"
"    jobject ret = env->NewObject(arrayListClass, methodInit);\n"
"    for (const auto& element : value)\n"
"    {\n"
"        jobject jelement = env->NewObject(typeClass, methodTypeInit, (jboolean)element);\n"
"        auto result = env->CallBooleanMethod(ret, methodAdd, jelement);\n"
"        if (result == JNI_FALSE)\n"
"        {\n"
"            env->DeleteLocalRef(jelement);\n"
"            env->DeleteLocalRef(ret);\n"
"            return nullptr;\n"
"        }\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return ret;\n"
"}\n"
"inline jobject createWrapperInt8Vector(JNIEnv* env, const std::vector<int8_t>& value)\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodInit = env->GetMethodID(arrayListClass, \"<init>\", \"()V\");\n"
"    jmethodID methodAdd = env->GetMethodID(arrayListClass, \"add\", \"(Ljava/lang/Object;)Z\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Byte\");\n"
"    jmethodID methodTypeInit = env->GetMethodID(typeClass, \"<init>\", \"(B)V\");\n"
"\n"
"    jobject ret = env->NewObject(arrayListClass, methodInit);\n"
"    for (const auto& element : value)\n"
"    {\n"
"        jobject jelement = env->NewObject(typeClass, methodTypeInit, (jbyte)element);\n"
"        auto result = env->CallBooleanMethod(ret, methodAdd, jelement);\n"
"        if (result == JNI_FALSE)\n"
"        {\n"
"            env->DeleteLocalRef(jelement);\n"
"            env->DeleteLocalRef(ret);\n"
"            return nullptr;\n"
"        }\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return ret;\n"
"}\n"
"inline jobject createWrapperInt16Vector(JNIEnv* env, const std::vector<int16_t>& value)\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodInit = env->GetMethodID(arrayListClass, \"<init>\", \"()V\");\n"
"    jmethodID methodAdd = env->GetMethodID(arrayListClass, \"add\", \"(Ljava/lang/Object;)Z\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Short\");\n"
"    jmethodID methodTypeInit = env->GetMethodID(typeClass, \"<init>\", \"(S)V\");\n"
"\n"
"    jobject ret = env->NewObject(arrayListClass, methodInit);\n"
"    for (const auto& element : value)\n"
"    {\n"
"        jobject jelement = env->NewObject(typeClass, methodTypeInit, (jshort)element);\n"
"        auto result = env->CallBooleanMethod(ret, methodAdd, jelement);\n"
"        if (result == JNI_FALSE)\n"
"        {\n"
"            env->DeleteLocalRef(jelement);\n"
"            env->DeleteLocalRef(ret);\n"
"            return nullptr;\n"
"        }\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return ret;\n"
"}\n"
"inline jobject createWrapperInt32Vector(JNIEnv* env, const std::vector<int32_t>& value) // intVector, enumVector\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodInit = env->GetMethodID(arrayListClass, \"<init>\", \"()V\");\n"
"    jmethodID methodAdd = env->GetMethodID(arrayListClass, \"add\", \"(Ljava/lang/Object;)Z\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Integer\");\n"
"    jmethodID methodTypeInit = env->GetMethodID(typeClass, \"<init>\", \"(I)V\");\n"
"\n"
"    jobject ret = env->NewObject(arrayListClass, methodInit);\n"
"    for (const auto& element : value)\n"
"    {\n"
"        jobject jelement = env->NewObject(typeClass, methodTypeInit, (jint)element);\n"
"        auto result = env->CallBooleanMethod(ret, methodAdd, jelement);\n"
"        if (result == JNI_FALSE)\n"
"        {\n"
"            env->DeleteLocalRef(jelement);\n"
"            env->DeleteLocalRef(ret);\n"
"            return nullptr;\n"
"        }\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return ret;\n"
"}\n"
"inline jobject createWrapperInt64Vector(JNIEnv* env, const std::vector<int64_t>& value) // intVector, enumVector\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodInit = env->GetMethodID(arrayListClass, \"<init>\", \"()V\");\n"
"    jmethodID methodAdd = env->GetMethodID(arrayListClass, \"add\", \"(Ljava/lang/Object;)Z\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Long\");\n"
"    jmethodID methodTypeInit = env->GetMethodID(typeClass, \"<init>\", \"(J)V\");\n"
"\n"
"    jobject ret = env->NewObject(arrayListClass, methodInit);\n"
"    for (const auto& element : value)\n"
"    {\n"
"        jobject jelement = env->NewObject(typeClass, methodTypeInit, (jlong)element);\n"
"        auto result = env->CallBooleanMethod(ret, methodAdd, jelement);\n"
"        if (result == JNI_FALSE)\n"
"        {\n"
"            env->DeleteLocalRef(jelement);\n"
"            env->DeleteLocalRef(ret);\n"
"            return nullptr;\n"
"        }\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return ret;\n"
"}\n"
"inline jobject createWrapperFloatVector(JNIEnv* env, const std::vector<float>& value)\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodInit = env->GetMethodID(arrayListClass, \"<init>\", \"()V\");\n"
"    jmethodID methodAdd = env->GetMethodID(arrayListClass, \"add\", \"(Ljava/lang/Object;)Z\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Float\");\n"
"    jmethodID methodTypeInit = env->GetMethodID(typeClass, \"<init>\", \"(F)V\");\n"
"\n"
"    jobject ret = env->NewObject(arrayListClass, methodInit);\n"
"    for (const auto& element : value)\n"
"    {\n"
"        jobject jelement = env->NewObject(typeClass, methodTypeInit, (jfloat)element);\n"
"        auto result = env->CallBooleanMethod(ret, methodAdd, jelement);\n"
"        if (result == JNI_FALSE)\n"
"        {\n"
"            env->DeleteLocalRef(jelement);\n"
"            env->DeleteLocalRef(ret);\n"
"            return nullptr;\n"
"        }\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return ret;\n"
"}\n"
"inline jobject createWrapperDoubleVector(JNIEnv* env, const std::vector<double>& value)\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodInit = env->GetMethodID(arrayListClass, \"<init>\", \"()V\");\n"
"    jmethodID methodAdd = env->GetMethodID(arrayListClass, \"add\", \"(Ljava/lang/Object;)Z\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Double\");\n"
"    jmethodID methodTypeInit = env->GetMethodID(typeClass, \"<init>\", \"(D)V\");\n"
"\n"
"    jobject ret = env->NewObject(arrayListClass, methodInit);\n"
"    for (const auto& element : value)\n"
"    {\n"
"        jobject jelement = env->NewObject(typeClass, methodTypeInit, (jdouble)element);\n"
"        auto result = env->CallBooleanMethod(ret, methodAdd, jelement);\n"
"        if (result == JNI_FALSE)\n"
"        {\n"
"            env->DeleteLocalRef(jelement);\n"
"            env->DeleteLocalRef(ret);\n"
"            return nullptr;\n"
"        }\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return ret;\n"
"}\n"
"inline jobject createWrapperStringVector(JNIEnv* env, const std::vector<std::string>& value) // stringVector\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodInit = env->GetMethodID(arrayListClass, \"<init>\", \"()V\");\n"
"    jmethodID methodAdd = env->GetMethodID(arrayListClass, \"add\", \"(Ljava/lang/Object;)Z\");\n"
"\n"
"\n"
"    jobject ret = env->NewObject(arrayListClass, methodInit);\n"
"    for (const auto& element : value)\n"
"    {\n"
"        jobject jelement = createWrapperString(env, element);\n"
"        auto result = env->CallBooleanMethod(ret, methodAdd, jelement);\n"
"        if (result == JNI_FALSE)\n"
"        {\n"
"            env->DeleteLocalRef(jelement);\n"
"            env->DeleteLocalRef(ret);\n"
"            return nullptr;\n"
"        }\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return ret;\n"
"}\n"
"inline jobject createWrapperEnumVector(JNIEnv* env, const std::vector<int32_t>& value)\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodInit = env->GetMethodID(arrayListClass, \"<init>\", \"()V\");\n"
"    jmethodID methodAdd = env->GetMethodID(arrayListClass, \"add\", \"(Ljava/lang/Object;)Z\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Integer\");\n"
"    jmethodID methodTypeInit = env->GetMethodID(typeClass, \"<init>\", \"(I)V\");\n"
"\n"
"    jobject ret = env->NewObject(arrayListClass, methodInit);\n"
"    for (const auto& element : value)\n"
"    {\n"
"        jobject jelement = env->NewObject(typeClass, methodTypeInit, (jint)element);\n"
"        auto result = env->CallBooleanMethod(ret, methodAdd, jelement);\n"
"        if (result == JNI_FALSE)\n"
"        {\n"
"            env->DeleteLocalRef(jelement);\n"
"            env->DeleteLocalRef(ret);\n"
"            return nullptr;\n"
"        }\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return ret;\n"
"}\n"
"inline jobject createWrapperObjectVector(JNIEnv* env, const std::vector<void*>& value) // objectVector\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodInit = env->GetMethodID(arrayListClass, \"<init>\", \"()V\");\n"
"    jmethodID methodAdd = env->GetMethodID(arrayListClass, \"add\", \"(Ljava/lang/Object;)Z\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Long\");\n"
"    jmethodID methodTypeInit = env->GetMethodID(typeClass, \"<init>\", \"(J)V\");\n"
"\n"
"    jobject ret = env->NewObject(arrayListClass, methodInit);\n"
"    for (const auto& element : value)\n"
"    {\n"
"        jobject jelement = env->NewObject(typeClass, methodTypeInit, (jlong)element);\n"
"        auto result = env->CallBooleanMethod(ret, methodAdd, jelement);\n"
"        if (result == JNI_FALSE)\n"
"        {\n"
"            env->DeleteLocalRef(jelement);\n"
"            env->DeleteLocalRef(ret);\n"
"            return nullptr;\n"
"        }\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return ret;\n"
"}\n"
"// Make Native Input Value\n"
"inline std::string createNativeString(JNIEnv* env, jstring value)\n"
"{\n"
"    const char* temp = env->GetStringUTFChars(value, nullptr);\n"
"    if (temp == nullptr)\n"
"        return std::string();\n"
"    std::string ret{ temp };\n"
"    env->ReleaseStringUTFChars(value, temp);\n"
"    return ret;\n"
"}\n"
"inline std::vector<bool> createNativeBooleanArray(JNIEnv* env, jbooleanArray value)\n"
"{\n"
"    std::vector<bool> ret;\n"
"    auto* elements = env->GetBooleanArrayElements(value, nullptr);\n"
"    if (!elements)\n"
"        return ret;\n"
"    jint size = env->GetArrayLength(value);\n"
"    for (size_t i = 0; i < size; i++)\n"
"    {\n"
"        ret.push_back((bool)elements[i]);\n"
"    }\n"
"    env->ReleaseBooleanArrayElements(value, elements, 0);\n"
"    return ret;\n"
"}\n"
"inline std::vector<int8_t> createNativeInt8Array(JNIEnv* env, jbyteArray value)\n"
"{\n"
"    std::vector<int8_t> ret;\n"
"    auto* elements = env->GetByteArrayElements(value, nullptr);\n"
"    if (!elements)\n"
"        return ret;\n"
"    jint size = env->GetArrayLength(value);\n"
"    for (size_t i = 0; i < size; i++)\n"
"    {\n"
"        ret.push_back((int8_t)elements[i]);\n"
"    }\n"
"    env->ReleaseByteArrayElements(value, elements, 0);\n"
"    return ret;\n"
"}\n"
"inline std::vector<int16_t> createNativeInt16Array(JNIEnv* env, jshortArray value)\n"
"{\n"
"    std::vector<int16_t> ret;\n"
"    auto* elements = env->GetShortArrayElements(value, nullptr);\n"
"    if (!elements)\n"
"        return ret;\n"
"    jint size = env->GetArrayLength(value);\n"
"    for (size_t i = 0; i < size; i++)\n"
"    {\n"
"        ret.push_back((int16_t)elements[i]);\n"
"    }\n"
"    env->ReleaseShortArrayElements(value, elements, 0);\n"
"    return ret;\n"
"}\n"
"inline std::vector<int32_t> createNativeInt32Array(JNIEnv* env, jintArray value) // intArray, enumArray\n"
"{\n"
"    std::vector<int32_t> ret;\n"
"    auto* elements = env->GetIntArrayElements(value, nullptr);\n"
"    if (!elements)\n"
"        return ret;\n"
"    jint size = env->GetArrayLength(value);\n"
"    for (size_t i = 0; i < size; i++)\n"
"    {\n"
"        ret.push_back((int32_t)elements[i]);\n"
"    }\n"
"    env->ReleaseIntArrayElements(value, elements, 0);\n"
"    return ret;\n"
"}\n"
"inline std::vector<int64_t> createNativeInt64Array(JNIEnv* env, jlongArray value)\n"
"{\n"
"    std::vector<int64_t> ret;\n"
"    auto* elements = env->GetLongArrayElements(value, nullptr);\n"
"    if (!elements)\n"
"        return ret;\n"
"    jint size = env->GetArrayLength(value);\n"
"    for (size_t i = 0; i < size; i++)\n"
"    {\n"
"        ret.push_back((int64_t)elements[i]);\n"
"    }\n"
"    env->ReleaseLongArrayElements(value, elements, 0);\n"
"    return ret;\n"
"}\n"
"inline std::vector<float> createNativeFloatArray(JNIEnv* env, jfloatArray value)\n"
"{\n"
"    std::vector<float> ret;\n"
"    auto* elements = env->GetFloatArrayElements(value, nullptr);\n"
"    if (!elements)\n"
"        return ret;\n"
"    jint size = env->GetArrayLength(value);\n"
"    for (size_t i = 0; i < size; i++)\n"
"    {\n"
"        ret.push_back((float)elements[i]);\n"
"    }\n"
"    env->ReleaseFloatArrayElements(value, elements, 0);\n"
"    return ret;\n"
"}\n"
"inline std::vector<double> createNativeDoubleArray(JNIEnv* env, jdoubleArray value)\n"
"{\n"
"    std::vector<double> ret;\n"
"    auto* elements = env->GetDoubleArrayElements(value, nullptr);\n"
"    if (!elements)\n"
"        return ret;\n"
"    jint size = env->GetArrayLength(value);\n"
"    for (size_t i = 0; i < size; i++)\n"
"    {\n"
"        ret.push_back((double)elements[i]);\n"
"    }\n"
"    env->ReleaseDoubleArrayElements(value, elements, 0);\n"
"    return ret;\n"
"}\n"
"inline std::vector<std::string> createNativeStringArray(JNIEnv* env, jobjectArray value) // stringArray\n"
"{\n"
"    std::vector<std::string> ret;\n"
"    jint size = env->GetArrayLength(value);\n"
"    for (size_t i = 0; i < size; i++)\n"
"    {\n"
"        jstring jelement = (jstring)env->GetObjectArrayElement(value, i);\n"
"        auto element = createNativeString(env, jelement);\n"
"        ret.push_back(element);\n"
"    }\n"
"    return ret;\n"
"}\n"
"inline std::vector<int32_t> createNativeEnumArray(JNIEnv* env, jintArray value)\n"
"{\n"
"    std::vector<int32_t> ret;\n"
"    auto* elements = env->GetIntArrayElements(value, nullptr);\n"
"    if (!elements)\n"
"        return ret;\n"
"    jint size = env->GetArrayLength(value);\n"
"    for (size_t i = 0; i < size; i++)\n"
"    {\n"
"        ret.push_back((int32_t)elements[i]);\n"
"    }\n"
"    env->ReleaseIntArrayElements(value, elements, 0);\n"
"    return ret;\n"
"}\n"
"inline std::vector<void*> createNativeObjectArray(JNIEnv* env, jlongArray value) // objectArray\n"
"{\n"
"    std::vector<void*> ret;\n"
"    auto* elements = env->GetLongArrayElements(value, nullptr);\n"
"    if (!elements)\n"
"        return ret;\n"
"    jint size = env->GetArrayLength(value);\n"
"    for (size_t i = 0; i < size; i++)\n"
"    {\n"
"        ret.push_back((void*)elements[i]);\n"
"    }\n"
"    env->ReleaseLongArrayElements(value, elements, 0);\n"
"    return ret;\n"
"}\n"
"inline std::vector<bool> createNativeBooleanVector(JNIEnv* env, jobject value)\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodSize = env->GetMethodID(arrayListClass, \"size\", \"()I\");\n"
"    jmethodID methodGet = env->GetMethodID(arrayListClass, \"get\", \"(I)Ljava/lang/Object;\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Boolean\");\n"
"    jmethodID methodTypeValue = env->GetMethodID(typeClass, \"booleanValue\", \"()Z\");\n"
"\n"
"    jint size = env->CallIntMethod(value, methodSize);\n"
"\n"
"    std::vector<bool> ret;\n"
"    for (jint i = 0; i < size; i++)\n"
"    {\n"
"        jobject jelement = env->CallObjectMethod(value, methodGet, i);\n"
"        if (jelement == nullptr)\n"
"        {\n"
"            ret.clear();\n"
"            return ret;\n"
"        }\n"
"        auto element = static_cast<bool>(env->CallBooleanMethod(jelement, methodTypeValue));\n"
"        ret.push_back(element);\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"\n"
"    return ret;\n"
"}\n"
"inline std::vector<int8_t> createNativeInt8Vector(JNIEnv* env, jobject value)\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodSize = env->GetMethodID(arrayListClass, \"size\", \"()I\");\n"
"    jmethodID methodGet = env->GetMethodID(arrayListClass, \"get\", \"(I)Ljava/lang/Object;\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Byte\");\n"
"    jmethodID methodTypeValue = env->GetMethodID(typeClass, \"byteValue\", \"()B\");\n"
"\n"
"    jint size = env->CallIntMethod(value, methodSize);\n"
"\n"
"    std::vector<int8_t> ret;\n"
"    for (jint i = 0; i < size; i++)\n"
"    {\n"
"        jobject jelement = env->CallObjectMethod(value, methodGet, i);\n"
"        if (jelement == nullptr)\n"
"        {\n"
"            ret.clear();\n"
"            return ret;\n"
"        }\n"
"        auto element = static_cast<int8_t>(env->CallByteMethod(jelement, methodTypeValue));\n"
"        ret.push_back(element);\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"\n"
"    return ret;\n"
"}\n"
"inline std::vector<int16_t> createNativeInt16Vector(JNIEnv* env, jobject value)\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodSize = env->GetMethodID(arrayListClass, \"size\", \"()I\");\n"
"    jmethodID methodGet = env->GetMethodID(arrayListClass, \"get\", \"(I)Ljava/lang/Object;\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Short\");\n"
"    jmethodID methodTypeValue = env->GetMethodID(typeClass, \"shortValue\", \"()S\");\n"
"\n"
"    jint size = env->CallIntMethod(value, methodSize);\n"
"\n"
"    std::vector<int16_t> ret;\n"
"    for (jint i = 0; i < size; i++)\n"
"    {\n"
"        jobject jelement = env->CallObjectMethod(value, methodGet, i);\n"
"        if (jelement == nullptr)\n"
"        {\n"
"            ret.clear();\n"
"            return ret;\n"
"        }\n"
"        auto element = static_cast<int16_t>(env->CallShortMethod(jelement, methodTypeValue));\n"
"        ret.push_back(element);\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"\n"
"    return ret;\n"
"}\n"
"inline std::vector<int32_t> createNativeInt32Vector(JNIEnv* env, jobject value) // intVector, enumVector\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodSize = env->GetMethodID(arrayListClass, \"size\", \"()I\");\n"
"    jmethodID methodGet = env->GetMethodID(arrayListClass, \"get\", \"(I)Ljava/lang/Object;\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Integer\");\n"
"    jmethodID methodTypeValue = env->GetMethodID(typeClass, \"intValue\", \"()I\");\n"
"\n"
"    jint size = env->CallIntMethod(value, methodSize);\n"
"\n"
"    std::vector<int32_t> ret;\n"
"    for (jint i = 0; i < size; i++)\n"
"    {\n"
"        jobject jelement = env->CallObjectMethod(value, methodGet, i);\n"
"        if (jelement == nullptr)\n"
"        {\n"
"            ret.clear();\n"
"            return ret;\n"
"        }\n"
"        auto element = static_cast<int32_t>(env->CallIntMethod(jelement, methodTypeValue));\n"
"        ret.push_back(element);\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return ret;\n"
"}\n"
"inline std::vector<int64_t> createNativeInt64Vector(JNIEnv* env, jobject value) // intVector, enumVector\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodSize = env->GetMethodID(arrayListClass, \"size\", \"()I\");\n"
"    jmethodID methodGet = env->GetMethodID(arrayListClass, \"get\", \"(I)Ljava/lang/Object;\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Long\");\n"
"    jmethodID methodTypeValue = env->GetMethodID(typeClass, \"longValue\", \"()J\");\n"
"\n"
"    jint size = env->CallIntMethod(value, methodSize);\n"
"\n"
"    std::vector<int64_t> ret;\n"
"    for (jint i = 0; i < size; i++)\n"
"    {\n"
"        jobject jelement = env->CallObjectMethod(value, methodGet, i);\n"
"        if (jelement == nullptr)\n"
"        {\n"
"            ret.clear();\n"
"            return ret;\n"
"        }\n"
"        auto element = static_cast<int64_t>(env->CallLongMethod(jelement, methodTypeValue));\n"
"        ret.push_back(element);\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return ret;\n"
"}\n"
"inline std::vector<float> createNativeFloatVector(JNIEnv* env, jobject value)\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodSize = env->GetMethodID(arrayListClass, \"size\", \"()I\");\n"
"    jmethodID methodGet = env->GetMethodID(arrayListClass, \"get\", \"(I)Ljava/lang/Object;\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Float\");\n"
"    jmethodID methodTypeValue = env->GetMethodID(typeClass, \"floatValue\", \"()F\");\n"
"\n"
"    jint size = env->CallIntMethod(value, methodSize);\n"
"\n"
"    std::vector<float> ret;\n"
"    for (jint i = 0; i < size; i++)\n"
"    {\n"
"        jobject jelement = env->CallObjectMethod(value, methodGet, i);\n"
"        if (jelement == nullptr)\n"
"        {\n"
"            ret.clear();\n"
"            return ret;\n"
"        }\n"
"        auto element = static_cast<float>(env->CallFloatMethod(jelement, methodTypeValue));\n"
"        ret.push_back(element);\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return ret;\n"
"}\n"
"inline std::vector<double> createNativeDoubleVector(JNIEnv* env, jobject value)\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodSize = env->GetMethodID(arrayListClass, \"size\", \"()I\");\n"
"    jmethodID methodGet = env->GetMethodID(arrayListClass, \"get\", \"(I)Ljava/lang/Object;\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Double\");\n"
"    jmethodID methodTypeValue = env->GetMethodID(typeClass, \"doubleValue\", \"()D\");\n"
"\n"
"    jint size = env->CallIntMethod(value, methodSize);\n"
"\n"
"    std::vector<double> ret;\n"
"    for (jint i = 0; i < size; i++)\n"
"    {\n"
"        jobject jelement = env->CallObjectMethod(value, methodGet, i);\n"
"        if (jelement == nullptr)\n"
"        {\n"
"            ret.clear();\n"
"            return ret;\n"
"        }\n"
"        auto element = static_cast<double>(env->CallDoubleMethod(jelement, methodTypeValue));\n"
"        ret.push_back(element);\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return ret;\n"
"}\n"
"inline std::vector<std::string> createNativeStringVector(JNIEnv* env, jobject value) // stringVector\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodSize = env->GetMethodID(arrayListClass, \"size\", \"()I\");\n"
"    jmethodID methodGet = env->GetMethodID(arrayListClass, \"get\", \"(I)Ljava/lang/Object;\");\n"
"\n"
"    jint size = env->CallIntMethod(value, methodSize);\n"
"\n"
"    std::vector<std::string> ret;\n"
"    for (jint i = 0; i < size; i++)\n"
"    {\n"
"        jstring jelement = (jstring)env->CallObjectMethod(value, methodGet, i);\n"
"        if (jelement == nullptr)\n"
"        {\n"
"            ret.clear();\n"
"            return ret;\n"
"        }\n"
"        auto element = createNativeString(env, jelement);\n"
"        ret.push_back(element);\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return ret;\n"
"}\n"
"inline std::vector<int32_t> createNativeEnumVector(JNIEnv* env, jobject value)\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodSize = env->GetMethodID(arrayListClass, \"size\", \"()I\");\n"
"    jmethodID methodGet = env->GetMethodID(arrayListClass, \"get\", \"(I)Ljava/lang/Object;\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Integer\");\n"
"    jmethodID methodTypeValue = env->GetMethodID(typeClass, \"intValue\", \"()I\");\n"
"\n"
"    jint size = env->CallIntMethod(value, methodSize);\n"
"\n"
"    std::vector<int32_t> ret;\n"
"    for (jint i = 0; i < size; i++)\n"
"    {\n"
"        jobject jelement = env->CallObjectMethod(value, methodGet, i);\n"
"        if (jelement == nullptr)\n"
"        {\n"
"            ret.clear();\n"
"            return ret;\n"
"        }\n"
"        auto element = static_cast<int32_t>(env->CallIntMethod(jelement, methodTypeValue));\n"
"        ret.push_back(element);\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return ret;\n"
"}\n"
"inline std::vector<void*> createNativeObjectVector(JNIEnv* env, jobject value) // objectVector\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodSize = env->GetMethodID(arrayListClass, \"size\", \"()I\");\n"
"    jmethodID methodGet = env->GetMethodID(arrayListClass, \"get\", \"(I)Ljava/lang/Object;\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Long\");\n"
"    jmethodID methodTypeValue = env->GetMethodID(typeClass, \"longValue\", \"()J\");\n"
"\n"
"    jint size = env->CallIntMethod(value, methodSize);\n"
"\n"
"    std::vector<void*> ret;\n"
"    for (jint i = 0; i < size; i++)\n"
"    {\n"
"        jobject jelement = env->CallObjectMethod(value, methodGet, i);\n"
"        if (jelement == nullptr)\n"
"        {\n"
"            ret.clear();\n"
"            return ret;\n"
"        }\n"
"        auto element = (void*)(env->CallLongMethod(jelement, methodTypeValue));\n"
"        ret.push_back(element);\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return ret;\n"
"}\n"
"// Copy Native Output to Wrapper Output\n"
"\n"
"inline bool copyBooleanArray(JNIEnv* env, const std::vector<bool>& src, jbooleanArray dest)\n"
"{\n"
"    jsize jsize = env->GetArrayLength(dest);\n"
"    if (src.size() != jsize)\n"
"        return false;\n"
"\n"
"    auto* jelements = env->GetBooleanArrayElements(dest, nullptr);\n"
"    if (!jelements)\n"
"        return false;\n"
"\n"
"    for (size_t i = 0; i < src.size(); i++)\n"
"    {\n"
"        jelements[i] = (jboolean)src[i];\n"
"    }\n"
"\n"
"    env->ReleaseBooleanArrayElements(dest, jelements, 0);\n"
"    return true;\n"
"}\n"
"inline bool copyInt8Array(JNIEnv* env, const std::vector<int8_t>& src, jbyteArray dest)\n"
"{\n"
"    jsize jsize = env->GetArrayLength(dest);\n"
"    if (src.size() != jsize)\n"
"        return false;\n"
"\n"
"    auto* jelements = env->GetByteArrayElements(dest, nullptr);\n"
"    if (!jelements)\n"
"        return false;\n"
"\n"
"    for (size_t i = 0; i < src.size(); i++)\n"
"    {\n"
"        jelements[i] = (jbyte)src[i];\n"
"    }\n"
"\n"
"    env->ReleaseByteArrayElements(dest, jelements, 0);\n"
"    return true;\n"
"}\n"
"inline bool copyInt16Array(JNIEnv* env, const std::vector<int16_t>& src, jshortArray dest)\n"
"{\n"
"    jsize jsize = env->GetArrayLength(dest);\n"
"    if (src.size() != jsize)\n"
"        return false;\n"
"\n"
"    auto* jelements = env->GetShortArrayElements(dest, nullptr);\n"
"    if (!jelements)\n"
"        return false;\n"
"\n"
"    for (size_t i = 0; i < src.size(); i++)\n"
"    {\n"
"        jelements[i] = (jshort)src[i];\n"
"    }\n"
"\n"
"    env->ReleaseShortArrayElements(dest, jelements, 0);\n"
"    return true;\n"
"}\n"
"inline bool copyInt32Array(JNIEnv* env, const std::vector<int32_t>& src, jintArray dest)\n"
"{\n"
"    jsize jsize = env->GetArrayLength(dest);\n"
"    if (src.size() != jsize)\n"
"        return false;\n"
"\n"
"    auto* jelements = env->GetIntArrayElements(dest, nullptr);\n"
"    if (!jelements)\n"
"        return false;\n"
"\n"
"    for (size_t i = 0; i < src.size(); i++)\n"
"    {\n"
"        jelements[i] = (jint)src[i];\n"
"    }\n"
"\n"
"    env->ReleaseIntArrayElements(dest, jelements, 0);\n"
"    return true;\n"
"}\n"
"inline bool copyInt64Array(JNIEnv* env, const std::vector<int64_t>& src, jlongArray dest)\n"
"{\n"
"    jsize jsize = env->GetArrayLength(dest);\n"
"    if (src.size() != jsize)\n"
"        return false;\n"
"\n"
"    auto* jelements = env->GetLongArrayElements(dest, nullptr);\n"
"    if (!jelements)\n"
"        return false;\n"
"\n"
"    for (size_t i = 0; i < src.size(); i++)\n"
"    {\n"
"        jelements[i] = (jlong)src[i];\n"
"    }\n"
"\n"
"    env->ReleaseLongArrayElements(dest, jelements, 0);\n"
"    return true;\n"
"}\n"
"inline bool copyFloatArray(JNIEnv* env, const std::vector<float>& src, jfloatArray dest)\n"
"{\n"
"    jsize jsize = env->GetArrayLength(dest);\n"
"    if (src.size() != jsize)\n"
"        return false;\n"
"\n"
"    auto* jelements = env->GetFloatArrayElements(dest, nullptr);\n"
"    if (!jelements)\n"
"        return false;\n"
"\n"
"    for (size_t i = 0; i < src.size(); i++)\n"
"    {\n"
"        jelements[i] = (jfloat)src[i];\n"
"    }\n"
"\n"
"    env->ReleaseFloatArrayElements(dest, jelements, 0);\n"
"    return true;\n"
"}\n"
"inline bool copyDoubleArray(JNIEnv* env, const std::vector<double>& src, jdoubleArray dest)\n"
"{\n"
"    jsize jsize = env->GetArrayLength(dest);\n"
"    if (src.size() != jsize)\n"
"        return false;\n"
"\n"
"    auto* jelements = env->GetDoubleArrayElements(dest, nullptr);\n"
"    if (!jelements)\n"
"        return false;\n"
"\n"
"    for (size_t i = 0; i < src.size(); i++)\n"
"    {\n"
"        jelements[i] = (jdouble)src[i];\n"
"    }\n"
"\n"
"    env->ReleaseDoubleArrayElements(dest, jelements, 0);\n"
"    return true;\n"
"}\n"
"inline bool copyStringArray(JNIEnv* env, const std::vector<std::string>& src, jobjectArray dest)\n"
"{\n"
"    jsize jsize = env->GetArrayLength(dest);\n"
"    if (src.size() != jsize)\n"
"        return false;\n"
"\n"
"    for (size_t i = 0; i < src.size(); i++)\n"
"    {\n"
"        jstring jelement = createWrapperString(env, src[i]);\n"
"        if (!jelement)\n"
"        {\n"
"            return false;\n"
"        }\n"
"        env->SetObjectArrayElement(dest, i, jelement);\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"\n"
"    return true;\n"
"}\n"
"inline bool copyEnumArray(JNIEnv* env, const std::vector<int32_t>& src, jintArray dest)\n"
"{\n"
"    jsize jsize = env->GetArrayLength(dest);\n"
"    if (src.size() != jsize)\n"
"        return false;\n"
"\n"
"    auto* jelements = env->GetIntArrayElements(dest, nullptr);\n"
"    if (!jelements)\n"
"        return false;\n"
"\n"
"    for (size_t i = 0; i < src.size(); i++)\n"
"    {\n"
"        jelements[i] = (jint)src[i];\n"
"    }\n"
"\n"
"    env->ReleaseIntArrayElements(dest, jelements, 0);\n"
"    return true;\n"
"}\n"
"inline bool copyObjectArray(JNIEnv* env, const std::vector<void*>& src, jlongArray dest)\n"
"{\n"
"    jsize jsize = env->GetArrayLength(dest);\n"
"    if (src.size() != jsize)\n"
"        return false;\n"
"\n"
"    auto* jelements = env->GetLongArrayElements(dest, nullptr);\n"
"    if (!jelements)\n"
"        return false;\n"
"\n"
"    for (size_t i = 0; i < src.size(); i++)\n"
"    {\n"
"        jelements[i] = (jlong)src[i];\n"
"    }\n"
"\n"
"    env->ReleaseLongArrayElements(dest, jelements, 0);\n"
"    return true;\n"
"}\n"
"inline bool copyBooleanVector(JNIEnv* env, const std::vector<bool>& src, jobject dest)\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodAdd = env->GetMethodID(arrayListClass, \"add\", \"(Ljava/lang/Object;)Z\");\n"
"    jmethodID methodClear = env->GetMethodID(arrayListClass, \"clear\", \"()V\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Boolean\");\n"
"    jmethodID methodTypeInit = env->GetMethodID(typeClass, \"<init>\", \"(Z)V\");\n"
"\n"
"    env->CallVoidMethod(dest, methodClear);\n"
"    for (const auto& element : src)\n"
"    {\n"
"        jobject jelement = env->NewObject(typeClass, methodTypeInit, (jboolean)element);\n"
"        if (!jelement)\n"
"            return false;\n"
"\n"
"        auto ret = env->CallBooleanMethod(dest, methodAdd, jelement);\n"
"        if (ret == JNI_FALSE)\n"
"        {\n"
"            env->DeleteLocalRef(jelement);\n"
"            return false;\n"
"        }\n"
"\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return true;\n"
"}\n"
"inline bool copyInt8Vector(JNIEnv* env, const std::vector<int8_t>& src, jobject dest)\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodAdd = env->GetMethodID(arrayListClass, \"add\", \"(Ljava/lang/Object;)Z\");\n"
"    jmethodID methodClear = env->GetMethodID(arrayListClass, \"clear\", \"()V\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Byte\");\n"
"    jmethodID methodTypeInit = env->GetMethodID(typeClass, \"<init>\", \"(B)V\");\n"
"\n"
"    env->CallVoidMethod(dest, methodClear);\n"
"    for (const auto& element : src)\n"
"    {\n"
"        jobject jelement = env->NewObject(typeClass, methodTypeInit, (jbyte)element);\n"
"        if (!jelement)\n"
"            return false;\n"
"\n"
"        auto ret = env->CallBooleanMethod(dest, methodAdd, jelement);\n"
"        if (ret == JNI_FALSE)\n"
"        {\n"
"            env->DeleteLocalRef(jelement);\n"
"            return false;\n"
"        }\n"
"\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return true;\n"
"}\n"
"inline bool copyInt16Vector(JNIEnv* env, const std::vector<int16_t>& src, jobject dest)\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodAdd = env->GetMethodID(arrayListClass, \"add\", \"(Ljava/lang/Object;)Z\");\n"
"    jmethodID methodClear = env->GetMethodID(arrayListClass, \"clear\", \"()V\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Short\");\n"
"    jmethodID methodTypeInit = env->GetMethodID(typeClass, \"<init>\", \"(S)V\");\n"
"\n"
"    env->CallVoidMethod(dest, methodClear);\n"
"    for (const auto& element : src)\n"
"    {\n"
"        jobject jelement = env->NewObject(typeClass, methodTypeInit, (jshort)element);\n"
"        if (!jelement)\n"
"            return false;\n"
"\n"
"        auto ret = env->CallBooleanMethod(dest, methodAdd, jelement);\n"
"        if (ret == JNI_FALSE)\n"
"        {\n"
"            env->DeleteLocalRef(jelement);\n"
"            return false;\n"
"        }\n"
"\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return true;\n"
"}\n"
"inline bool copyInt32Vector(JNIEnv* env, const std::vector<int32_t>& src, jobject dest)\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodAdd = env->GetMethodID(arrayListClass, \"add\", \"(Ljava/lang/Object;)Z\");\n"
"    jmethodID methodClear = env->GetMethodID(arrayListClass, \"clear\", \"()V\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Integer\");\n"
"    jmethodID methodTypeInit = env->GetMethodID(typeClass, \"<init>\", \"(I)V\");\n"
"\n"
"    env->CallVoidMethod(dest, methodClear);\n"
"    for (const auto& element : src)\n"
"    {\n"
"        jobject jelement = env->NewObject(typeClass, methodTypeInit, (jint)element);\n"
"        if (!jelement)\n"
"            return false;\n"
"\n"
"        auto ret = env->CallBooleanMethod(dest, methodAdd, jelement);\n"
"        if (ret == JNI_FALSE)\n"
"        {\n"
"            env->DeleteLocalRef(jelement);\n"
"            return false;\n"
"        }\n"
"\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return true;\n"
"}\n"
"inline bool copyInt64Vector(JNIEnv* env, const std::vector<int64_t>& src, jobject dest)\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodAdd = env->GetMethodID(arrayListClass, \"add\", \"(Ljava/lang/Object;)Z\");\n"
"    jmethodID methodClear = env->GetMethodID(arrayListClass, \"clear\", \"()V\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Long\");\n"
"    jmethodID methodTypeInit = env->GetMethodID(typeClass, \"<init>\", \"(J)V\");\n"
"\n"
"    env->CallVoidMethod(dest, methodClear);\n"
"    for (const auto& element : src)\n"
"    {\n"
"        jobject jelement = env->NewObject(typeClass, methodTypeInit, (jlong)element);\n"
"        if (!jelement)\n"
"            return false;\n"
"\n"
"        auto ret = env->CallBooleanMethod(dest, methodAdd, jelement);\n"
"        if (ret == JNI_FALSE)\n"
"        {\n"
"            env->DeleteLocalRef(jelement);\n"
"            return false;\n"
"        }\n"
"\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return true;\n"
"}\n"
"inline bool copyFloatVector(JNIEnv* env, const std::vector<float>& src, jobject dest)\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodAdd = env->GetMethodID(arrayListClass, \"add\", \"(Ljava/lang/Object;)Z\");\n"
"    jmethodID methodClear = env->GetMethodID(arrayListClass, \"clear\", \"()V\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Float\");\n"
"    jmethodID methodTypeInit = env->GetMethodID(typeClass, \"<init>\", \"(F)V\");\n"
"\n"
"    env->CallVoidMethod(dest, methodClear);\n"
"    for (const auto& element : src)\n"
"    {\n"
"        jobject jelement = env->NewObject(typeClass, methodTypeInit, (jfloat)element);\n"
"        if (!jelement)\n"
"            return false;\n"
"\n"
"        auto ret = env->CallBooleanMethod(dest, methodAdd, jelement);\n"
"        if (ret == JNI_FALSE)\n"
"        {\n"
"            env->DeleteLocalRef(jelement);\n"
"            return false;\n"
"        }\n"
"\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return true;\n"
"}\n"
"inline bool copyDoubleVector(JNIEnv* env, const std::vector<double>& src, jobject dest)\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodAdd = env->GetMethodID(arrayListClass, \"add\", \"(Ljava/lang/Object;)Z\");\n"
"    jmethodID methodClear = env->GetMethodID(arrayListClass, \"clear\", \"()V\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Float\");\n"
"    jmethodID methodTypeInit = env->GetMethodID(typeClass, \"<init>\", \"(D)V\");\n"
"\n"
"    env->CallVoidMethod(dest, methodClear);\n"
"    for (const auto& element : src)\n"
"    {\n"
"        jobject jelement = env->NewObject(typeClass, methodTypeInit, (jdouble)element);\n"
"        if (!jelement)\n"
"            return false;\n"
"\n"
"        auto ret = env->CallBooleanMethod(dest, methodAdd, jelement);\n"
"        if (ret == JNI_FALSE)\n"
"        {\n"
"            env->DeleteLocalRef(jelement);\n"
"            return false;\n"
"        }\n"
"\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return true;\n"
"}\n"
"inline bool copyStringVector(JNIEnv* env, const std::vector<std::string>& src, jobject dest)\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodAdd = env->GetMethodID(arrayListClass, \"add\", \"(Ljava/lang/Object;)Z\");\n"
"    jmethodID methodClear = env->GetMethodID(arrayListClass, \"clear\", \"()V\");\n"
"\n"
"    env->CallVoidMethod(dest, methodClear);\n"
"    for (const auto& element : src)\n"
"    {\n"
"        jstring jelement = createWrapperString(env, element);\n"
"        if (!jelement)\n"
"            return false;\n"
"\n"
"        auto ret = env->CallBooleanMethod(dest, methodAdd, jelement);\n"
"        if (ret == JNI_FALSE)\n"
"        {\n"
"            env->DeleteLocalRef(jelement);\n"
"            return false;\n"
"        }\n"
"\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return true;\n"
"}\n"
"inline bool copyEnumVector(JNIEnv* env, const std::vector<int32_t>& src, jobject dest)\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodAdd = env->GetMethodID(arrayListClass, \"add\", \"(Ljava/lang/Object;)Z\");\n"
"    jmethodID methodClear = env->GetMethodID(arrayListClass, \"clear\", \"()V\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Integer\");\n"
"    jmethodID methodTypeInit = env->GetMethodID(typeClass, \"<init>\", \"(I)V\");\n"
"\n"
"    env->CallVoidMethod(dest, methodClear);\n"
"    for (const auto& element : src)\n"
"    {\n"
"        jobject jelement = env->NewObject(typeClass, methodTypeInit, (jint)element);\n"
"        if (!jelement)\n"
"            return false;\n"
"\n"
"        auto ret = env->CallBooleanMethod(dest, methodAdd, jelement);\n"
"        if (ret == JNI_FALSE)\n"
"        {\n"
"            env->DeleteLocalRef(jelement);\n"
"            return false;\n"
"        }\n"
"\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return true;\n"
"}\n"
"inline bool copyObjectVector(JNIEnv* env, const std::vector<void*>& src, jobject dest)\n"
"{\n"
"    jclass arrayListClass = env->FindClass(\"java/util/ArrayList\");\n"
"    jmethodID methodAdd = env->GetMethodID(arrayListClass, \"add\", \"(Ljava/lang/Object;)Z\");\n"
"    jmethodID methodClear = env->GetMethodID(arrayListClass, \"clear\", \"()V\");\n"
"\n"
"    jclass typeClass = env->FindClass(\"java/lang/Long\");\n"
"    jmethodID methodTypeInit = env->GetMethodID(typeClass, \"<init>\", \"(J)V\");\n"
"\n"
"    env->CallVoidMethod(dest, methodClear);\n"
"    for (const auto& element : src)\n"
"    {\n"
"        jobject jelement = env->NewObject(typeClass, methodTypeInit, (jlong)element);\n"
"        if (!jelement)\n"
"            return false;\n"
"\n"
"        auto ret = env->CallBooleanMethod(dest, methodAdd, jelement);\n"
"        if (ret == JNI_FALSE)\n"
"        {\n"
"            env->DeleteLocalRef(jelement);\n"
"            return false;\n"
"        }\n"
"\n"
"        env->DeleteLocalRef(jelement);\n"
"    }\n"
"    return true;\n"
"}";

#endif