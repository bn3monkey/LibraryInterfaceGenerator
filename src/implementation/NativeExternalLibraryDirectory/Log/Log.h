const char* log_header = 
"#ifndef __LIBRARYINTERFACEGENERATOR_LOG__\n"
"#define __LIBRARYINTERFACEGENERATOR_LOG__\n"
"\n"
"#include <cstdarg>\n"
"#include <cstdio>\n"
"#include <string>\n"
"#include <mutex>\n"
"\n"
"#if defined _WIN32 //WINDOWS\n"
"#include <Windows.h>\n"
"#elif defined __ANDROID__ //ANDROID\n"
"#include <android/log.h>\n"
"#elif (defined __linux__) && !(defined __ANDROID__) // LINUX\n"
"\n"
"#endif\n"
"\n"
"class Log\n"
"{\n"
"public:\n"
"\tstatic const int PRIO_VERBOSE;\n"
"\tstatic const int PRIO_DEBUG;\n"
"\tstatic const int PRIO_INFO;\n"
"\tstatic const int PRIO_WARN;\n"
"\tstatic const int PRIO_ERROR;\n"
"\n"
"\tstatic constexpr const size_t MAX_LINE = 512;\n"
"\tstatic constexpr const size_t MAX_STORABLE_COUNT = 8196;\n"
"\tstatic constexpr const size_t SIZE_FORMATTED_DATE = sizeof(\"2014-04-21 13:00:00 \") - 1;\n"
"\tstatic constexpr const size_t SIZE_FORMATTED_PRIORITY = sizeof(\"[?] | \") - 1;\n"
"\tstatic constexpr const size_t SIZE_FORMATTED_HEADER = SIZE_FORMATTED_DATE + SIZE_FORMATTED_PRIORITY;\n"
"\tstatic constexpr const size_t SIZE_FORMATTED_CONTENT = MAX_LINE - SIZE_FORMATTED_HEADER;\n"
"\n"
"\tstatic inline void V(const char* tag, const char* format, ...) {\n"
"\t\tva_list args;\n"
"\t\tva_start(args, format);\n"
"\t\tprint(PRIO_VERBOSE, tag, format, args);\n"
"\t\tva_end(args);\n"
"\t}\n"
"\tstatic inline void D(const char* tag, const char* format, ...) {\n"
"\t\tva_list args;\n"
"\t\tva_start(args, format);\n"
"\t\tprint(PRIO_DEBUG, tag, format, args);\n"
"\t\tva_end(args);\n"
"\t}\n"
"\tstatic inline void E(const char* tag, const char* format, ...) {\n"
"\t\tva_list args;\n"
"\t\tva_start(args, format);\n"
"\t\tprint(PRIO_ERROR, tag, format, args);\n"
"\t\tva_end(args);\n"
"\t}\n"
"\tstatic inline void W(const char* tag, const char* format, ...) {\n"
"\t\tva_list args;\n"
"\t\tva_start(args, format);\n"
"\t\tprint(PRIO_WARN, tag, format, args);\n"
"\t\tva_end(args);\n"
"\t}\n"
"\tstatic inline void I(const char* tag, const char* format, ...) {\n"
"\t\tva_list args;\n"
"\t\tva_start(args, format);\n"
"\t\tprint(PRIO_INFO, tag, format, args);\n"
"\t\tva_end(args);\n"
"\t}\n"
"\n"
"\tstatic int32_t exportLog(char* data);\n"
"\n"
"private:\n"
"\tstatic void print(int priority, const char* tag, const char* format, va_list args);\n"
"\tstatic size_t setDate(char (&buffer)[Log::MAX_LINE]);\n"
"\tstatic size_t setPriority(char* buffer, int priority);\n"
"\tstatic size_t setTag(char* buffer, const char* tag);\n"
"};\n"
"\n"
"#endif";

const char* log_source = 
"#include \"Log.h\"\n"
"\n"
"class LogStream\n"
"{\n"
"public :\n"
"\tLogStream() : start_pos(0), end_pos(0) {\n"
"\t}\n"
"\tvoid read(const char(&buffer)[Log::MAX_LINE])\n"
"\t{\n"
"\t\t{\n"
"\t\t\tstd::lock_guard<std::mutex> lock(stream_mtx);\n"
"\t\t\tchar(&target)[Log::MAX_LINE] = data[end_pos];\n"
"\n"
"\t\t\tstd::copy(buffer, buffer + Log::MAX_LINE, target);\n"
"\n"
"\t\t\tend_pos = (end_pos + 1) % Log::MAX_STORABLE_COUNT;\n"
"\t\t\tif (start_pos == end_pos)\n"
"\t\t\t{\n"
"\t\t\t\tstart_pos = (start_pos + 1) % Log::MAX_STORABLE_COUNT;\n"
"\t\t\t}\n"
"\t\t}\n"
"\t}\n"
"\tint32_t write(char* buffer)\n"
"\t{\n"
"\t\tint32_t written_pos = 0;\n"
"\t\t{\n"
"\t\t\tstd::lock_guard<std::mutex> lock(stream_mtx);\n"
"\t\t\tfor (size_t writing_pos = start_pos; writing_pos != end_pos; writing_pos = (writing_pos + 1) % Log::MAX_STORABLE_COUNT)\n"
"\t\t\t{\n"
"\t\t\t\tchar(&target)[Log::MAX_LINE] = data[writing_pos];\n"
"\t\t\t\tsize_t log_size = strlen(target);\n"
"\t\t\t\tstd::copy(target, target + log_size, buffer + written_pos);\n"
"\t\t\t\twritten_pos += log_size;\n"
"\t\t\t}\n"
"\t\t}\n"
"\t\treturn written_pos;\n"
"\t}\n"
"private:\n"
"\tstd::mutex stream_mtx;\n"
"\tsize_t start_pos;\n"
"\tsize_t end_pos;\n"
"\tchar data[Log::MAX_STORABLE_COUNT][Log::MAX_LINE] = { {0} };\n"
"};\n"
"static LogStream logStream;\n"
"\n"
"#if defined _WIN32 //WINDOWS\n"
"const int Log::PRIO_VERBOSE = 0;\n"
"const int Log::PRIO_DEBUG = 1;\n"
"const int Log::PRIO_INFO = 2;\n"
"const int Log::PRIO_WARN = 3;\n"
"const int Log::PRIO_ERROR = 4;\n"
"#elif defined __ANDROID__ //ANDROID\n"
"const int Log::PRIO_VERBOSE = ANDROID_LOG_VERBOSE;\n"
"const int Log::PRIO_DEBUG = ANDROID_LOG_DEBUG;\n"
"const int Log::PRIO_INFO = ANDROID_LOG_INFO;\n"
"const int Log::PRIO_WARN = ANDROID_LOG_WARN;\n"
"const int Log::PRIO_ERROR = ANDROID_LOG_ERROR;\n"
"#elif (defined __linux__) && !(defined __ANDROID__) // LINUX\n"
"const int Log::PRIO_VERBOSE = 0;\n"
"const int Log::PRIO_DEBUG = 1;\n"
"const int Log::PRIO_INFO = 2;\n"
"const int Log::PRIO_WARN = 3;\n"
"const int Log::PRIO_ERROR = 4;\n"
"#endif\n"
"\n"
"\n"
"\n"
"void Log::print(int priority, const char* tag, const char* format, va_list args)\n"
"{\n"
"\tchar formatted[Log::SIZE_FORMATTED_CONTENT] = { 0 };\n"
"\tsize_t formatted_size =\n"
"#if defined _WIN32\n"
"\t\tvsprintf_s(formatted, format, args);\n"
"#elif defined __ANDROID__\n"
"\t\tvsprintf(formatted, format, args);\n"
"#elif (defined __linux__) && !(defined __ANDROID__)\n"
"#endif\n"
"\n"
"#if defined __ANDROID__\n"
"\t\t__android_log_vprint(priority, tag, format, args);\n"
"#endif\n"
"\tformatted[formatted_size] = '\\n';\n"
"\tformatted[formatted_size + 1] = '\\0';\n"
"\tformatted_size += 1;\n"
"\n"
"\tchar buffer[Log::MAX_LINE] = { 0 };\n"
"\tsize_t written_size = setDate(buffer);\n"
"\twritten_size += setPriority(buffer + written_size, priority);\n"
"\twritten_size += setTag(buffer + written_size, tag);\n"
"\tstd::copy(formatted, formatted + formatted_size, buffer + written_size);\n"
"\t\n"
"\n"
"#if defined _WIN32\n"
"\tOutputDebugStringA(buffer);\n"
"\tprintf(buffer);\n"
"#endif\n"
"\n"
"\tlogStream.read(buffer);\n"
"}\n"
"\n"
"int32_t Log::exportLog(char* data)\n"
"{\n"
"\tint32_t ret = logStream.write(data);\n"
"\treturn ret;\n"
"}\n"
"\n"
"size_t Log::setDate(char(&buffer)[Log::MAX_LINE])\n"
"{\n"
"\ttime_t now = time(0);\n"
"\tstruct tm tstruct;\n"
"#if defined _WIN32\n"
"\tlocaltime_s(&tstruct, &now);\n"
"#else\n"
"\tlocaltime_r(&now, &tstruct);\n"
"#endif\n"
"\n"
"\tsize_t written_size =\n"
"#if defined _WIN32\n"
"\tsnprintf(buffer, SIZE_FORMATTED_DATE + 1, \"%04d-%02d-%02d %02d:%02d:%02d \", tstruct.tm_year + 1900, tstruct.tm_mon, tstruct.tm_mday, tstruct.tm_hour, tstruct.tm_min, tstruct.tm_sec);\n"
"#else\n"
"\tsnprintf(buffer, SIZE_FORMATTED_DATE + 1, \"%d-%d-%d %02d:%02d:%02d \", tstruct.tm_year + 1900, tstruct.tm_mon, tstruct.tm_mday, tstruct.tm_hour, tstruct.tm_min, tstruct.tm_sec);\n"
"#endif\n"
"\treturn SIZE_FORMATTED_DATE;\n"
"}\n"
"\n"
"size_t Log::setPriority(char* buffer, int priority)\n"
"{\n"
"\tconst char* priority_str = \"[?] | \";\n"
"\tswitch (priority)\n"
"\t{\n"
"\tcase Log::PRIO_VERBOSE:\n"
"\t\tpriority_str = \"[V] | \";\n"
"\t\tbreak;\n"
"\tcase Log::PRIO_DEBUG:\n"
"\t\tpriority_str = \"[D] | \";\n"
"\t\tbreak;\n"
"\tcase Log::PRIO_INFO:\n"
"\t\tpriority_str = \"[I] | \";\n"
"\t\tbreak;\n"
"\tcase Log::PRIO_WARN:\n"
"\t\tpriority_str = \"[W] | \";\n"
"\t\tbreak;\n"
"\tcase Log::PRIO_ERROR:\n"
"\t\tpriority_str = \"[E] | \";\n"
"\t\tbreak;\n"
"\t}\n"
"\tsize_t size = sizeof(\"[?] | \");\n"
"\tstd::copy(priority_str, priority_str + size, buffer);\n"
"\treturn SIZE_FORMATTED_PRIORITY;\n"
"}\n"
"\n"
"size_t Log::setTag(char* buffer, const char* tag)\n"
"{\n"
"\tbuffer[0] = '{';\n"
"\tsize_t tag_size = strlen(tag);\n"
"\tstd::copy(tag, tag + tag_size, buffer + 1);\n"
"\tbuffer[tag_size + 1] = '}';\n"
"\tbuffer[tag_size + 2] = ' ';\n"
"\tbuffer[tag_size + 3] = '\\0';\n"
"\treturn tag_size + 3;\n"
"}\n"
"";