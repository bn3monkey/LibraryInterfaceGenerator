#if !defined(__BN3MONKEY_LIBRARY_INTERFACE_GENERATOR_TAG_HPP__)
#define __BN3MONKEY_LIBRARY_INTERFACE_GENERATOR_TAG_HPP__
static constexpr char* TAG_HPP = 
"#ifndef __BN3MONKEY_TAG__\n"
"#define __BN3MONKEY_TAG__\n"
"\n"
"#include <cstring>\n"
"#include <algorithm>\n"
"#include <cassert>\n"
"\n"
"namespace Bn3Monkey\n"
"{\n"
"	constexpr size_t TAG_SIZE = 32;\n"
"	\n"
"	struct Bn3Tag\n"
"	{\n"
"		Bn3Tag() {\n"
"			// name is 0\n"
"		}\n"
"		explicit Bn3Tag(const char* value)\n"
"		{\n"
"			size_t length = strlen(value);\n"
"			if (length >= TAG_SIZE - 1)\n"
"				length = TAG_SIZE - 1;\n"
"			std::copy(value, value + length, name);\n"
"		}\n"
"		explicit Bn3Tag(const Bn3Tag& prefix, const char* value)\n"
"		{\n"
"			size_t prefix_len = strlen(prefix.name);\n"
"			size_t length = strlen(value);\n"
"			if (prefix_len + length >= TAG_SIZE - 1)\n"
"			{\n"
"				length = TAG_SIZE - 1 - prefix_len;\n"
"			}\n"
"\n"
"			std::copy(prefix.name, prefix.name + prefix_len, name);\n"
"			std::copy(value, value+ length, name + prefix_len);\n"
"		}\n"
"		explicit Bn3Tag(const char* value, const Bn3Tag& postfix)\n"
"		{\n"
"			size_t postfix_len = strlen(postfix.name);\n"
"			size_t length = strlen(value);\n"
"			if (postfix_len + length < TAG_SIZE - 1)\n"
"			{\n"
"				length = TAG_SIZE - 1 - postfix_len;\n"
"			}\n"
"\n"
"			std::copy(value, value + length, name);\n"
"			std::copy(postfix.name, postfix.name + postfix_len, name + length);\n"
"		}\n"
"		Bn3Tag(const Bn3Tag& other)\n"
"		{\n"
"			const char* value = other.name;\n"
"			size_t length = strlen(value);\n"
"			std::copy(value, value + length, name);\n"
"		}\n"
"		Bn3Tag(Bn3Tag&& other) noexcept\n"
"		{\n"
"			const char* value = other.name;\n"
"			size_t length = strlen(value);\n"
"			std::copy(value, value + length, name);\n"
"		}\n"
"		Bn3Tag& operator=(const Bn3Tag& other)\n"
"		{\n"
"			clear();\n"
"			const char* value = other.name;\n"
"			size_t length = strlen(value);\n"
"			std::copy(value, value + length, name);\n"
"\n"
"			return *this;\n"
"		}\n"
"\n"
"		inline bool operator==(const Bn3Tag& other)\n"
"		{\n"
"			return !strcmp(name, other.name);\n"
"		}\n"
"\n"
"		inline void clear() { memset(name, 0, sizeof(name)); }\n"
"		inline const char* str() const { return name; }\n"
"\n"
"	private:\n"
"		char name[TAG_SIZE]{ 0 };\n"
"	};\n"
"}\n"
"\n"
"#endif\n";
#endif //__BN3MONKEY_LIBRARY_INTERFACE_GENERATOR_TAG_HPP__
